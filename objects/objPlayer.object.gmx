<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprMaskPlayer</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_index = cond_exp(global.grav == 1, sprMaskPlayer, sprMaskPlayerFlip);
image_speed = 0.2;
xScale = global.lastxScale;

maxSpeed = 3;
maxVSpeed = 9;

jumpsHeight = new_array(8.5, 7);
jumps = 2;
scrRecoverJumps();

gravity = 0.4 * global.grav;

notOnBlock = false;
onPlatform = false;
frozen = false;

//new by me
totalFrozen = false;
attachObject = noone;

if (global.gameStarted &amp;&amp; global.difficulty == 0 &amp;&amp; !instance_exists(objBow)) {
    instance_create(x, y, objBow);
}

if (global.autosave) {
    scrSaveGame(true);
    global.autosave = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lastxScale = xScale;
instance_destroy(objBow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.dotKid) {
    mask_index = sprDotKid;
    sprite_index = sprDotKid;
} else {
    mask_index = cond_exp(global.grav == 1, sprMaskPlayer, sprMaskPlayerFlip);
}

if (global.borderKills &amp;&amp; scrOutsideRoom()) {
    scrKillPlayer();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if totalFrozen
{
    if instance_exists(attachObject)
    {
        x = attachObject.x;
        y = attachObject.y;
    }
    gravity = 0;
}
else
{
var L = scrButtonHeld(global.leftButton);
var R = scrButtonHeld(global.rightButton);
var h = 0;

if (!frozen) {
    if (R) {
        h = 1;
    } else if (L) {
        h = -1;
    }
}

notOnBlock = !place_meeting(x, y + global.grav, objBlock);
var onSlipBlock = instance_place(x, y + global.grav, objSlipBlock);
var onVineR = (place_meeting(x - 1, y, objWalljumpR) &amp;&amp; notOnBlock);
var onVineL = (place_meeting(x + 1, y, objWalljumpL) &amp;&amp; notOnBlock);

if (h != 0) {
    if (!onVineR &amp;&amp; !onVineL) {
        xScale = h;
    }
    
    if ((h == -1 &amp;&amp; !onVineL) || (h == 1 &amp;&amp; !onVineR)) {
        if (onSlipBlock == noone) {
            hspeed = maxSpeed * h;
        } else {
            hspeed += (onSlipBlock.slip) * h;
            
            if (abs(hspeed) &gt; maxSpeed) {
                hspeed = maxSpeed * h;
            }
        }
        
        image_speed = 0.5;
        sprite_index = sprPlayerRunning;
    }
} else {
    if (onSlipBlock == noone) {
        hspeed = 0;
    } else {
        if (hspeed &gt; 0) {
            hspeed -= onSlipBlock.slip;
            
            if (hspeed &lt;= 0) {
                hspeed = 0;
            }
        } else if (hspeed &lt; 0) {
            hspeed += onSlipBlock.slip;
            
            if (hspeed &gt;= 0) {
                hspeed = 0;
            }
        }
    }
    
    image_speed = 0.2;
    sprite_index = sprPlayerIdle;
}

if (!onPlatform) {
    if (vspeed * global.grav &lt; -0.05) {
        sprite_index = sprPlayerJump;
    } else if (vspeed * global.grav &gt; 0.05) {
        sprite_index = sprPlayerFall;
    }
} else {
    if (!place_meeting(x, y + 4 * global.grav, objPlatform)) {
        onPlatform = false;
    }
}

var onSlideBlock = instance_place(x, y + global.grav, objSlideBlock);

if (onSlideBlock != noone) {
    hspeed += onSlideBlock.h;
}

if (abs(vspeed) &gt; maxVSpeed) {
    vspeed = sign(vspeed) * maxVSpeed;
}

if (!frozen) {
    if (scrButtonPressed(global.jumpButton)) {
        scrPlayerJump();
    }
    
    if (scrButtonReleased(global.jumpButton)) {
        scrPlayerVJump();
    }
        
    if (scrButtonPressed(global.shootButton)) {
        scrPlayerShoot();
    }
        
    if (scrButtonPressed(global.suicideButton)) {
        scrKillPlayer();
    }
        
    if (global.debugMode &amp;&amp; !notOnBlock) {
        if (scrButtonPressed(global.debugAlignButtonL)) {
            hspeed = -1;
        }
            
        if (scrButtonPressed(global.debugAlignButtonR)) {
            hspeed = 1;
        }
    }
}

if (onVineL || onVineR) {
    xScale = cond_exp(onVineR, 1, -1); 
    vspeed = 2 * global.grav;
    sprite_index = sprPlayerSliding;
    image_speed = 1 / 2;
    
    if ((onVineL &amp;&amp; scrButtonPressed(global.leftButton)) || (onVineR &amp;&amp; scrButtonPressed(global.rightButton))) {
        if (scrButtonHeld(global.jumpButton)) {
            hspeed = cond_exp(onVineR, 15, -15);
            vspeed = -9 * global.grav;
            audio_play_sound(sndWalljump, 0, false);
            sprite_index = sprPlayerJump;
        } else {
            hspeed = cond_exp(onVineR, 3, -3);
            sprite_index = sprPlayerFall;
        }
    }
}

//slopes

if (instance_exists(objSlope) &amp;&amp; hspeed != 0)
{
    var moveLimit = abs(hspeed);    //sets how high/low the player can go to snap onto a slope, this can be increased to make the player able to run over steeper slopes (ie setting it to abs(hspeed)*2 allows the player to run over slopes twice as steep)
    
    var slopeCheck;
    var hTest;
    
    var ySlope;
    
    //falling onto a slope
    if (place_meeting(x+hspeed,y+vspeed+gravity,objSlope) &amp;&amp; (vspeed+gravity)*global.grav &gt; 0 &amp;&amp; notOnBlock)
    {
        var xLast = x;
        var yLast = y;
        var hLast = hspeed;
        var vLast = vspeed;
        
        vspeed += gravity;
        
        x += hspeed;
        hspeed = 0;
        
        if(!place_free(x,y+vspeed))
        {
            if (global.grav == 1)   //normal
                move_contact_solid(270,abs(vspeed));
            else    //flipped
                move_contact_solid(90,abs(vspeed));
            vspeed = 0;
        }
        
        y += vspeed;            
        
        if (!place_free(x,y+(global.grav)) &amp;&amp; place_free(x,y))  //snapped onto the slope properly
        {
            djump = 1;
            notOnBlock = false;
        }
        else    //did not snap onto the slope, return to previous position
        {
            x = xLast;
            y = yLast;
            hspeed = hLast;
            vspeed = vLast;
        }
    }
    
    //moving down a slope
    if (!notOnBlock)
    {
        var onSlope = (place_meeting(x,y+(global.grav),objSlope));    //treat normal blocks the same as slopes if we're standing on a slope
        
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            //check how far we should move down
            while ((!place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; !place_meeting(x+hTest,y-ySlope+(global.grav),objBlock))) &amp;&amp; ySlope*global.grav &gt; -floor(moveLimit*(hTest/hspeed)))
            {
                ySlope -= global.grav;
            }
            
            //check if we actually need to move down
            if (place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; place_meeting(x+hTest,y-ySlope+(global.grav),objBlock)))
            {
                if (ySlope != 0 &amp;&amp; !place_meeting(x+hTest,y-ySlope,objBlock))
                {
                    y -= ySlope;
                    
                    x += hTest;
                    hspeed = 0;
                    
                    slopeCheck = false;
                }
                else
                {
                    if (hTest &gt; 0)
                    {
                        hTest -= 1;
                        if (hTest &lt;= 0)
                            slopeCheck = false;
                    }
                    else if (hTest &lt; 0)
                    {
                        hTest += 1;
                        if (hTest &gt;= 0)
                            slopeCheck = false;
                    }
                    else
                    {
                        slopeCheck = false;
                    }
                }
            }
            else
            {
                slopeCheck = false;
            }
        }
    }
    
    //moving up a slope
    if (place_meeting(x+hspeed,y,objSlope))
    {
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            
            //check how far we have to move up
            while (place_meeting(x+hTest,y-ySlope,objSlope) &amp;&amp; ySlope*global.grav &lt; floor(moveLimit*(hTest/hspeed)))
            {
                ySlope += global.grav;
            }
            
            //check if we actually need to move up
            if (place_free(x+hTest,y-ySlope))
            {            
                y -= ySlope;
                
                x += hTest;
                hspeed = 0;
                
                slopeCheck = false;
            }
            else
            {
                if (hTest &gt; 0)
                {
                    hTest -= 1;
                    if (hTest &lt;= 0)
                        slopeCheck = false;
                }
                else if (hTest &lt; 0)
                {
                    hTest += 1;
                    if (hTest &gt;= 0)
                        slopeCheck = false;
                }
                else
                {
                    slopeCheck = false;
                }
            }
        }
    }
    
    //set xprevious/yprevious coordinates for future solid collisions
    xprevious = x;
    yprevious = y;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.grav == 1) {
    if (y - vspeed / 2 &lt;= other.y) {
        if (other.vspeed &gt;= 0) {
            y = other.y - 9;
            vspeed = other.vspeed;
        }
        
        onPlatform = true;
        scrRecoverJumps();
    }
} else {
    if (y - vspeed / 2 &gt;= other.y + other.sprite_height - 1) {
        if (other.yspeed &lt;= 0) {
            y = other.y + other.sprite_height + 8;
            vspeed = other.yspeed;
        }
        
        onPlatform = true;
        scrRecoverJumps();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!place_free(x + hspeed, y)) {
    if (global.grav == 1) {
        if (hspeed &lt;= 0) {
            move_contact_solid(180, abs(hspeed));
        } else {
            move_contact_solid(0, abs(hspeed));
        }
    } else {
        if (hspeed &lt; 0) {
            move_contact_solid(180, abs(hspeed));
        } else {
            move_contact_solid(0, abs(hspeed));
        }
    }
        
    hspeed = 0;
}
 
if (!place_free(x, y + vspeed)) {
    if (vspeed &lt;= 0) {
        move_contact_solid(90, abs(vspeed));
        
        if (global.grav == -1) {
            scrRecoverJumps();
        }
    } else {
        move_contact_solid(270, abs(vspeed));
        
        if (global.grav == 1) {
            scrRecoverJumps();
        }
    }
        
    vspeed = 0;
}

if (!place_free(x + hspeed, y + vspeed)) {
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debugColoring) {
    if (global.debugGodMode) {
        image_blend = c_fuchsia;
    } else if (global.debugInfJump) {
        image_blend = c_blue;
    } else {
        image_blend = c_white;
    }
}

var drawX = x;
var drawY = y;

if (global.grav == -1 &amp;&amp; !global.dotKid) {
    drawY++;
}

draw_sprite_ext(sprite_index, image_index, drawX, drawY, image_xscale * xScale, image_yscale * global.grav, image_angle, image_blend, image_alpha);

if (global.dotKid) {
    draw_sprite(sprBoxDotKid, 0, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
